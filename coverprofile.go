package coverprofile

import (
	"go/token"
	"path/filepath"
	"reflect"
	"strings"

	"golang.org/x/tools/cover"
	"golang.org/x/tools/go/analysis"
)

var (
	flagCoverProfile string
)

func init() {
	Analyzer.Flags.StringVar(&flagCoverProfile, "coverprofile", "coverprofile", "file name of coverprofile")
}

var Analyzer = &analysis.Analyzer{
	Name:       "coverprofile",
	Doc:        Doc,
	Run:        run,
	ResultType: reflect.TypeOf(([]*cover.Profile)(nil)),
}

const Doc = "coverprofile parses a coverprofile file which generated by go test with -coverprofile option"

func run(pass *analysis.Pass) (result interface{}, rerr error) {
	result = ([]*cover.Profile)(nil)

	var dir string
	pass.Fset.Iterate(func(f *token.File) bool {
		fname := f.Name()
		if filepath.Ext(fname) == ".go" &&
			!strings.HasSuffix(fname, "_test.go") {
			dir = filepath.Dir(fname)
			return false
		}
		return true
	})

	if dir == "" {
		return
	}

	fname := filepath.Join(dir, flagCoverProfile)
	ps, err := cover.ParseProfiles(fname)
	if err != nil {
		return
	}

	return ps, nil
}
